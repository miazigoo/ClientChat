from PySide6.QtWidgets import (QMainWindow, QVBoxLayout, QHBoxLayout,
                               QWidget, QLabel, QPushButton, QTextEdit,
                               QScrollArea, QFrame, QLineEdit, QSplitter,
                               QListWidget, QListWidgetItem, QFileDialog,
                               QMessageBox, QStatusBar, QToolBar)
from PySide6.QtCore import Qt, QTimer, QDateTime, Signal
from PySide6.QtGui import QFont, QIcon, QAction, QPixmap
import json
from styles.theme_manager import theme_manager, ThemeType


class MessageBubble(QFrame):
    def __init__(self, message_data, is_user=True):
        super().__init__()
        self.message_data = message_data
        self.is_user = is_user
        self.setup_ui()
        self.apply_theme()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã
        theme_manager.theme_changed.connect(self.apply_theme)

    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(12, 8, 12, 8)
        layout.setSpacing(4)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        self.message_label = QLabel(self.message_data["text"])
        self.message_label.setWordWrap(True)
        self.message_label.setFont(QFont("Arial", 10))

        # –í—Ä–µ–º—è –∏ —Å—Ç–∞—Ç—É—Å
        info_layout = QHBoxLayout()
        self.time_label = QLabel(self.message_data["time"])
        self.time_label.setFont(QFont("Arial", 8))

        info_layout.addWidget(self.time_label)

        if self.is_user:
            # –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.status_label = QLabel("‚úì‚úì" if self.message_data.get("delivered", True) else "‚úì")
            self.status_label.setFont(QFont("Arial", 8))
            info_layout.addWidget(self.status_label)
        else:
            # –ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            self.operator_label = QLabel(self.message_data.get("operator", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
            self.operator_label.setFont(QFont("Arial", 8))
            info_layout.addWidget(self.operator_label)

        layout.addWidget(self.message_label)
        layout.addLayout(info_layout)

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –ø—É–∑—ã—Ä—å–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
        theme_data = theme_manager.get_theme_styles()
        colors = theme_data["colors"]

        if self.is_user:
            # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ø—Ä–∞–≤–∞, —Å–∏–Ω–∏–µ)
            self.setStyleSheet(f"""
                QFrame {{
                    background-color: {colors["user_message"]};
                    border-radius: 12px;
                    color: white;
                    max-width: 300px;
                }}
            """)
            self.time_label.setStyleSheet(f"color: rgba(255, 255, 255, 0.7);")
            if hasattr(self, 'status_label'):
                self.status_label.setStyleSheet(f"color: rgba(255, 255, 255, 0.8);")
        else:
            # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—Å–ª–µ–≤–∞, —Å–µ—Ä—ã–µ)
            self.setStyleSheet(f"""
                QFrame {{
                    background-color: {colors["operator_message"]};
                    border-radius: 12px;
                    color: {colors["text_primary"]};
                    max-width: 300px;
                    border: 1px solid {colors["border"]};
                }}
            """)
            self.time_label.setStyleSheet(f"color: {colors['text_muted']};")
            if hasattr(self, 'operator_label'):
                self.operator_label.setStyleSheet(f"color: {colors['success']}; font-weight: bold;")


class ChatArea(QScrollArea):
    def __init__(self):
        super().__init__()
        self.setup_ui()
        self.messages = []
        self.apply_theme()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã
        theme_manager.theme_changed.connect(self.apply_theme)

    def setup_ui(self):
        self.setWidgetResizable(True)
        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)

        self.chat_widget = QWidget()
        self.chat_layout = QVBoxLayout(self.chat_widget)
        self.chat_layout.setSpacing(10)
        self.chat_layout.setContentsMargins(15, 15, 15, 15)
        self.chat_layout.addStretch()

        self.setWidget(self.chat_widget)

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –æ–±–ª–∞—Å—Ç–∏ —á–∞—Ç–∞"""
        theme_data = theme_manager.get_theme_styles()
        colors = theme_data["colors"]

        self.setStyleSheet(f"""
            QScrollArea {{
                border: none;
                background-color: {colors["background"]};
            }}
            QScrollBar:vertical {{
                background-color: {colors["surface_alt"]};
                width: 8px;
                border-radius: 4px;
            }}
            QScrollBar::handle:vertical {{
                background-color: {colors["border"]};
                border-radius: 4px;
                min-height: 20px;
            }}
            QScrollBar::handle:vertical:hover {{
                background-color: {colors["text_muted"]};
            }}
        """)

    def add_message(self, text, is_user=True, operator=None):
        current_time = QDateTime.currentDateTime().toString("hh:mm")

        message_data = {
            "text": text,
            "time": current_time,
            "delivered": True
        }

        if not is_user and operator:
            message_data["operator"] = operator

        bubble = MessageBubble(message_data, is_user)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        container = QWidget()
        container_layout = QHBoxLayout(container)
        container_layout.setContentsMargins(0, 0, 0, 0)

        if is_user:
            container_layout.addStretch()
            container_layout.addWidget(bubble)
        else:
            container_layout.addWidget(bubble)
            container_layout.addStretch()

        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ stretch
        self.chat_layout.insertWidget(self.chat_layout.count() - 1, container)

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        QTimer.singleShot(100, self.scroll_to_bottom)

        self.messages.append(message_data)

    def scroll_to_bottom(self):
        scrollbar = self.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())


class MainWindow(QMainWindow):
    def __init__(self, user_data):
        super().__init__()
        self.user_data = user_data

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é toolbar
        self.main_toolbar = None

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã
        theme_manager.theme_changed.connect(self.apply_theme)

        self.setup_ui()
        self.setup_toolbar()
        self.setup_statusbar()
        self.apply_theme()  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.load_sample_messages()

    def setup_ui(self):
        self.setWindowTitle(f"–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - {self.user_data['name']}")
        self.setGeometry(100, 100, 800, 600)

        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(0, 0, 0, 0)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        self.header = self.create_header()
        main_layout.addWidget(self.header)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        splitter = QSplitter(Qt.Horizontal)
        main_layout.addWidget(splitter, 1)

        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        chat_container = QWidget()
        chat_layout = QVBoxLayout(chat_container)
        chat_layout.setContentsMargins(0, 0, 0, 0)
        chat_layout.setSpacing(0)

        self.chat_area = ChatArea()
        chat_layout.addWidget(self.chat_area, 1)

        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        self.input_panel = self.create_input_panel()
        chat_layout.addWidget(self.input_panel)

        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self.sidebar = self.create_sidebar()

        splitter.addWidget(chat_container)
        splitter.addWidget(self.sidebar)
        splitter.setSizes([600, 200])

    def create_header(self):
        header = QFrame()
        header.setFixedHeight(60)

        layout = QHBoxLayout(header)
        layout.setContentsMargins(20, 10, 20, 10)

        # –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.avatar_label = QLabel(self.user_data["avatar"])
        self.avatar_label.setStyleSheet("font-size: 20px;")
        self.avatar_label.setFixedSize(40, 40)
        self.avatar_label.setAlignment(Qt.AlignCenter)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        info_layout = QVBoxLayout()
        info_layout.setSpacing(2)

        self.name_label = QLabel(self.user_data["name"])
        self.name_label.setFont(QFont("Arial", 12, QFont.Bold))

        self.details_label = QLabel(f"ID: {self.user_data['id']} ‚Ä¢ {self.user_data['status']}")
        self.details_label.setFont(QFont("Arial", 9))

        info_layout.addWidget(self.name_label)
        info_layout.addWidget(self.details_label)

        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_status = QLabel("üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω")
        self.connection_status.setFont(QFont("Arial", 9))

        layout.addWidget(self.avatar_label)
        layout.addLayout(info_layout, 1)
        layout.addWidget(self.connection_status)

        return header

    def create_input_panel(self):
        panel = QFrame()
        panel.setFixedHeight(80)

        layout = QHBoxLayout(panel)
        layout.setContentsMargins(15, 10, 15, 10)
        layout.setSpacing(10)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.message_input = QTextEdit()
        self.message_input.setFixedHeight(50)
        self.message_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QVBoxLayout()
        buttons_layout.setSpacing(5)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª
        self.attach_btn = QPushButton("üìé")
        self.attach_btn.setFixedSize(35, 25)
        self.attach_btn.setToolTip("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª")
        self.attach_btn.clicked.connect(self.attach_file)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        self.send_btn = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        self.send_btn.setFixedSize(80, 25)
        self.send_btn.clicked.connect(self.send_message)

        buttons_layout.addWidget(self.attach_btn)
        buttons_layout.addWidget(self.send_btn)

        layout.addWidget(self.message_input, 1)
        layout.addLayout(buttons_layout)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter
        self.message_input.keyPressEvent = self.handle_key_press

        return panel

    def create_sidebar(self):
        sidebar = QFrame()
        sidebar.setMaximumWidth(250)

        layout = QVBoxLayout(sidebar)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        self.sidebar_title = QLabel("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        self.sidebar_title.setFont(QFont("Arial", 12, QFont.Bold))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        self.user_info = QLabel(f"""
        <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b><br>
        üìß {self.user_data['email']}<br>
        üì± {self.user_data['phone']}<br><br>
        <b>–°—Ç–∞—Ç—É—Å:</b> {self.user_data['status']}<br>
        <b>ID:</b> {self.user_data['id']}
        """)
        self.user_info.setWordWrap(True)

        # –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –æ–Ω–ª–∞–π–Ω
        self.operators_label = QLabel("–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –æ–Ω–ª–∞–π–Ω:")
        self.operators_label.setFont(QFont("Arial", 10, QFont.Bold))

        self.operators_list = QListWidget()
        self.operators_list.setMaximumHeight(100)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        self.operators_list.addItem("üë©‚Äçüíº –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞")
        self.operators_list.addItem("üë®‚Äçüíª –ú–∏—Ö–∞–∏–ª –°–∏–¥–æ—Ä–æ–≤")
        self.operators_list.addItem("üë©‚Äçüíª –ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞")

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.actions_label = QLabel("–î–µ–π—Å—Ç–≤–∏—è:")
        self.actions_label.setFont(QFont("Arial", 10, QFont.Bold))

        self.history_btn = QPushButton("üìã –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤")
        self.settings_btn = QPushButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.logout_btn = QPushButton("üö™ –í—ã—Ö–æ–¥")

        self.logout_btn.clicked.connect(self.logout)

        layout.addWidget(self.sidebar_title)
        layout.addWidget(self.user_info)
        layout.addWidget(self.operators_label)
        layout.addWidget(self.operators_list)
        layout.addWidget(self.actions_label)
        layout.addWidget(self.history_btn)
        layout.addWidget(self.settings_btn)
        layout.addWidget(self.logout_btn)
        layout.addStretch()

        return sidebar

    def setup_toolbar(self):
        self.main_toolbar = QToolBar()
        self.addToolBar(self.main_toolbar)

        # –î–µ–π—Å—Ç–≤–∏—è —Ç—É–ª–±–∞—Ä–∞
        new_chat_action = QAction("üÜï –ù–æ–≤—ã–π —á–∞—Ç", self)
        history_action = QAction("üìã –ò—Å—Ç–æ—Ä–∏—è", self)
        settings_action = QAction("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", self)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã –≤ —Ç—É–ª–±–∞—Ä
        theme_toggle_action = QAction("üåô/‚òÄÔ∏è –¢–µ–º–∞", self)
        theme_toggle_action.setShortcut('Ctrl+T')
        theme_toggle_action.triggered.connect(theme_manager.toggle_theme)

        self.main_toolbar.addAction(new_chat_action)
        self.main_toolbar.addSeparator()
        self.main_toolbar.addAction(history_action)
        self.main_toolbar.addAction(settings_action)
        self.main_toolbar.addSeparator()
        self.main_toolbar.addAction(theme_toggle_action)

    def setup_statusbar(self):
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π")

    def load_sample_messages(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        sample_messages = [
            {"text": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", "is_user": False,
             "operator": "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞"},
            {"text": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É.", "is_user": True},
            {"text": "–ü–æ–Ω—è—Ç–Ω–æ. –ú–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫–∞–∫–∞—è –∏–º–µ–Ω–Ω–æ –æ—à–∏–±–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è?", "is_user": False,
             "operator": "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞"}
        ]

        for msg in sample_messages:
            self.chat_area.add_message(
                msg["text"],
                msg["is_user"],
                msg.get("operator")
            )

    def handle_key_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞"""
        if event.key() == Qt.Key_Return and not event.modifiers() == Qt.ShiftModifier:
            self.send_message()
            event.accept()
        else:
            QTextEdit.keyPressEvent(self.message_input, event)

    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = self.message_input.toPlainText().strip()
        if not text:
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.chat_area.add_message(text, is_user=True)

        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.message_input.clear()

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_bar.showMessage(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {QDateTime.currentDateTime().toString('hh:mm:ss')}")

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        QTimer.singleShot(2000, self.simulate_operator_response)

    def simulate_operator_response(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        responses = [
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –°–µ–π—á–∞—Å —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π.",
            "–ü–µ—Ä–µ–¥–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è...",
            "–Ø –≤–∏–∂—É –ø—Ä–æ–±–ª–µ–º—É. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º."
        ]

        import random
        response = random.choice(responses)
        self.chat_area.add_message(response, is_user=False, operator="–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞")

    def attach_file(self):
        """–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª",
            "",
            "–í—Å–µ —Ñ–∞–π–ª—ã (*.*)"
        )

        if file_path:
            file_name = file_path.split('/')[-1]
            self.chat_area.add_message(f"üìé –§–∞–π–ª: {file_name}", is_user=True)
            print(f"–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")

    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        reply = QMessageBox.question(
            self,
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞',
            '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?',
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            self.close()
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –≤—Ö–æ–¥–∞

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
        theme_data = theme_manager.get_theme_styles()
        colors = theme_data["colors"]
        styles = theme_data["styles"]

        # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.setStyleSheet(f"""
            QMainWindow {{
                background-color: {colors["background"]};
                color: {colors["text_primary"]};
            }}
        """)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if hasattr(self, 'header'):
            self.header.setStyleSheet(f"""
                QFrame {{
                    background-color: {colors["surface"]};
                    border-bottom: 1px solid {colors["border"]};
                }}
            """)

            self.name_label.setStyleSheet(f"color: {colors['text_primary']};")
            self.details_label.setStyleSheet(f"color: {colors['text_muted']};")
            self.connection_status.setStyleSheet(f"color: {colors['success']};")

        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        if hasattr(self, 'input_panel'):
            self.input_panel.setStyleSheet(f"""
                QFrame {{
                    background-color: {colors["surface"]};
                    border-top: 1px solid {colors["border"]};
                }}
            """)

            self.message_input.setStyleSheet(f"""
                QTextEdit {{
                    background-color: {colors["surface_alt"]};
                    border: 2px solid {colors["border"]};
                    border-radius: 8px;
                    padding: 8px;
                    font-size: 11px;
                    color: {colors["text_primary"]};
                }}
                QTextEdit:focus {{
                    border: 2px solid {colors["primary"]};
                }}
            """)

            # –°—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫
            button_style = f"""
                QPushButton {{
                    background-color: {colors["primary"]};
                    border: none;
                    border-radius: 4px;
                    color: white;
                    font-weight: bold;
                    font-size: 10px;
                }}
                QPushButton:hover {{
                    background-color: {colors["primary_hover"]};
                }}
                QPushButton:pressed {{
                    background-color: {colors["primary_pressed"]};
                }}
            """

            self.send_btn.setStyleSheet(button_style)
            self.attach_btn.setStyleSheet(button_style)

        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
        if hasattr(self, 'sidebar'):
            self.sidebar.setStyleSheet(f"""
                QFrame {{
                    background-color: {colors["surface"]};
                    border-left: 1px solid {colors["border"]};
                }}
            """)

            self.sidebar_title.setStyleSheet(f"""
                color: {colors['text_primary']}; 
                border-bottom: 1px solid {colors['border']}; 
                padding-bottom: 5px;
            """)

            self.user_info.setStyleSheet(f"color: {colors['text_secondary']}; font-size: 10px;")
            self.operators_label.setStyleSheet(f"color: {colors['text_primary']};")
            self.actions_label.setStyleSheet(f"color: {colors['text_primary']};")

            self.operators_list.setStyleSheet(f"""
                QListWidget {{
                    background-color: {colors["surface_alt"]};
                    border: 1px solid {colors["border"]};
                    border-radius: 4px;
                    font-size: 9px;
                    color: {colors["text_secondary"]};
                }}
                QListWidget::item {{
                    padding: 4px;
                    border-bottom: 1px solid {colors["border"]};
                }}
                QListWidget::item:hover {{
                    background-color: {colors["primary"]};
                    color: white;
                }}
            """)

            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å–∞–π–¥–±–∞—Ä–µ
            sidebar_button_style = f"""
                QPushButton {{
                    background-color: {colors["surface_alt"]};
                    border: 1px solid {colors["border"]};
                    border-radius: 4px;
                    padding: 6px;
                    text-align: left;
                    font-size: 9px;
                    color: {colors["text_primary"]};
                }}
                QPushButton:hover {{
                    background-color: {colors["primary"]};
                    border: 1px solid {colors["primary"]};
                    color: white;
                }}
                QPushButton:pressed {{
                    background-color: {colors["primary_pressed"]};
                }}
            """

            for btn in [self.history_btn, self.settings_btn, self.logout_btn]:
                btn.setStyleSheet(sidebar_button_style)

        # –¢—É–ª–±–∞—Ä
        if hasattr(self, 'main_toolbar') and self.main_toolbar:
            self.main_toolbar.setStyleSheet(f"""
                QToolBar {{
                    background-color: {colors["surface_alt"]};
                    border-bottom: 1px solid {colors["border"]};
                    spacing: 5px;
                    padding: 5px;
                }}
                QToolBar QToolButton {{
                    color: {colors["text_primary"]};
                    font-size: 10px;
                    padding: 4px 8px;
                    border: none;
                    border-radius: 4px;
                }}
                QToolBar QToolButton:hover {{
                    background-color: {colors["primary"]};
                    color: white;
                }}
            """)

        # –°—Ç–∞—Ç—É—Å–±–∞—Ä
        if hasattr(self, 'status_bar'):
            self.status_bar.setStyleSheet(f"""
                QStatusBar {{
                    background-color: {colors["surface_alt"]};
                    color: {colors["text_secondary"]};
                    border-top: 1px solid {colors["border"]};
                    font-size: 9px;
                }}
            """)
