from PySide6.QtWidgets import (QMainWindow, QVBoxLayout, QHBoxLayout,
                               QWidget, QLabel, QPushButton, QScrollArea,
                               QFrame, QLineEdit)
from PySide6.QtCore import Qt, Signal
from PySide6.QtGui import QFont, QAction
import os, json
from styles.theme_manager import theme_manager, ThemeType


class UserCard(QFrame):
    clicked = Signal(dict)

    def __init__(self, user_data):
        super().__init__()
        self.user_data = user_data
        self.setup_ui()
        self.apply_theme()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã
        theme_manager.theme_changed.connect(self.apply_theme)

    def setup_ui(self):
        layout = QHBoxLayout(self)
        layout.setContentsMargins(15, 10, 15, 10)

        # –ê–≤–∞—Ç–∞—Ä
        self.avatar_label = QLabel(self.user_data["avatar"])
        self.avatar_label.setStyleSheet("font-size: 24px;")
        self.avatar_label.setFixedSize(40, 40)
        self.avatar_label.setAlignment(Qt.AlignCenter)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        info_layout = QVBoxLayout()
        info_layout.setSpacing(2)

        # –ò–º—è
        self.name_label = QLabel(self.user_data["name"])
        self.name_label.setFont(QFont("Arial", 11, QFont.Bold))

        # ID –∏ —Å—Ç–∞—Ç—É—Å
        details_layout = QHBoxLayout()
        self.id_label = QLabel(f"ID: {self.user_data['id']}")
        self.id_label.setFont(QFont("Arial", 9))

        self.status_label = QLabel(self.user_data["status"])
        self.status_label.setFont(QFont("Arial", 9, QFont.Bold))

        details_layout.addWidget(self.id_label)
        details_layout.addStretch()
        details_layout.addWidget(self.status_label)

        info_layout.addWidget(self.name_label)
        info_layout.addLayout(details_layout)

        layout.addWidget(self.avatar_label)
        layout.addLayout(info_layout, 1)

        self.setCursor(Qt.PointingHandCursor)

    def get_status_color(self, theme_colors):
        """–ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã"""
        status = self.user_data["status"]
        if status == "VIP":
            return theme_colors["warning"]
        elif status == "–ü—Ä–µ–º–∏—É–º":
            return theme_colors["error"]
        else:
            return theme_colors["success"]

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É"""
        theme_data = theme_manager.get_theme_styles()
        colors = theme_data["colors"]

        # –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        self.setStyleSheet(f"""
            UserCard {{
                background-color: {colors["surface_alt"]};
                border-radius: 8px;
                border: 1px solid {colors["border"]};
                margin: 2px;
            }}
            UserCard:hover {{
                background-color: {colors["surface"]};
                border: 1px solid {colors["primary"]};
            }}
        """)

        # –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
        self.name_label.setStyleSheet(f"color: {colors['text_primary']};")
        self.id_label.setStyleSheet(f"color: {colors['text_muted']};")
        self.status_label.setStyleSheet(f"color: {self.get_status_color(colors)};")

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.clicked.emit(self.user_data)


class LoginWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.user_cards = []
        self.setup_menu()
        self.setup_ui()
        self.apply_theme()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã
        theme_manager.theme_changed.connect(self.apply_theme)

    def setup_menu(self):
        """–°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        menubar = self.menuBar()

        # –ú–µ–Ω—é "–í–∏–¥"
        view_menu = menubar.addMenu('–í–∏–¥')

        # –ü–æ–¥–º–µ–Ω—é "–¢–µ–º–∞"
        theme_menu = view_menu.addMenu('üé® –¢–µ–º–∞')

        # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        dark_theme_action = QAction('üåô –¢–µ–º–Ω–∞—è', self)
        dark_theme_action.setCheckable(True)
        dark_theme_action.setChecked(theme_manager.get_current_theme() == ThemeType.DARK)
        dark_theme_action.triggered.connect(lambda: self.set_theme(ThemeType.DARK))

        # –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
        light_theme_action = QAction('‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è', self)
        light_theme_action.setCheckable(True)
        light_theme_action.setChecked(theme_manager.get_current_theme() == ThemeType.LIGHT)
        light_theme_action.triggered.connect(lambda: self.set_theme(ThemeType.LIGHT))

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–æ)
        from PySide6.QtGui import QActionGroup
        self.theme_group = QActionGroup(self)
        self.theme_group.addAction(dark_theme_action)
        self.theme_group.addAction(light_theme_action)

        theme_menu.addAction(dark_theme_action)
        theme_menu.addAction(light_theme_action)
        theme_menu.addSeparator()

        # –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        toggle_theme_action = QAction('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É', self)
        toggle_theme_action.setShortcut('Ctrl+T')
        toggle_theme_action.triggered.connect(theme_manager.toggle_theme)
        theme_menu.addAction(toggle_theme_action)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
        self.dark_theme_action = dark_theme_action
        self.light_theme_action = light_theme_action

        # –ü–æ–¥–º–µ–Ω—é "–ê–∫—Ü–µ–Ω—Ç"
        accent_menu = view_menu.addMenu('üé® –ê–∫—Ü–µ–Ω—Ç')

        from PySide6.QtGui import QActionGroup
        self.accent_group = QActionGroup(self)

        def add_accent(label, key):
            act = QAction(label, self)
            act.setCheckable(True)
            act.setChecked(theme_manager.get_accent() == key)
            act.triggered.connect(lambda: theme_manager.set_accent(key))
            self.accent_group.addAction(act)
            accent_menu.addAction(act)

        add_accent('–°–∏–Ω–∏–π', 'blue')
        add_accent('–ó–µ–ª—ë–Ω—ã–π', 'green')
        add_accent('–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', 'purple')
        add_accent('–û—Ä–∞–Ω–∂–µ–≤—ã–π', 'orange')

    def set_theme(self, theme_type: ThemeType):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É"""
        theme_manager.set_theme(theme_type)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω—é
        self.dark_theme_action.setChecked(theme_type == ThemeType.DARK)
        self.light_theme_action.setChecked(theme_type == ThemeType.LIGHT)

    def setup_ui(self):
        self.setWindowTitle("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        self.setFixedSize(450, 650)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—ã—Å–æ—Ç—É –¥–ª—è –º–µ–Ω—é

        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        layout = QVBoxLayout(central_widget)
        layout.setSpacing(20)
        layout.setContentsMargins(30, 20, 30, 30)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        self.title_label.setFont(QFont("Arial", 16, QFont.Bold))
        self.title_label.setAlignment(Qt.AlignCenter)

        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–º–µ
        self.theme_info_label = QLabel()
        self.theme_info_label.setFont(QFont("Arial", 9))
        self.theme_info_label.setAlignment(Qt.AlignCenter)
        self.update_theme_info()

        # –ü–æ–∏—Å–∫
        search_layout = QVBoxLayout()
        self.search_label = QLabel("–ü–æ–∏—Å–∫:")
        self.search_label.setFont(QFont("Arial", 10))

        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ ID...")
        self.search_input.textChanged.connect(self.filter_users)

        search_layout.addWidget(self.search_label)
        search_layout.addWidget(self.search_input)

        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)

        self.users_widget = QWidget()
        self.users_layout = QVBoxLayout(self.users_widget)
        self.users_layout.setSpacing(5)
        self.users_layout.setContentsMargins(5, 5, 5, 5)

        self.scroll_area.setWidget(self.users_widget)

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.create_user_cards()

        # –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        theme_toggle_layout = QHBoxLayout()
        self.theme_toggle_btn = QPushButton("üåô/‚òÄÔ∏è –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É")
        self.theme_toggle_btn.setMaximumWidth(150)
        self.theme_toggle_btn.clicked.connect(theme_manager.toggle_theme)
        theme_toggle_layout.addStretch()
        theme_toggle_layout.addWidget(self.theme_toggle_btn)
        theme_toggle_layout.addStretch()

        layout.addWidget(self.title_label)
        layout.addWidget(self.theme_info_label)
        layout.addLayout(search_layout)
        layout.addWidget(self.scroll_area, 1)
        layout.addLayout(theme_toggle_layout)

    def create_user_cards(self):
        """–°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = self._load_clients_from_json()
        for user in users:
            card = UserCard(user)
            card.clicked.connect(self.on_user_selected)
            self.user_cards.append(card)
            self.users_layout.addWidget(card)

        self.users_layout.addStretch()

    def _load_clients_from_json(self):
        base = os.path.dirname(os.path.abspath(__file__))
        json_path = os.path.normpath(os.path.join(base, "..", "agent", "agent_ids.json"))
        try:
            with open(json_path, "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception:
            data = {}
        users = []
        for key, val in data.items():
            fx_id = str(val.get("fx_id"))
            operator_id = str(val.get("operator_id"))
            operator_name = val.get("name", key)
            client_id = int(val.get("client_id", 0))
            users.append({
                "id": fx_id,                 # –¥–ª—è UI –ø–æ–∫–∞–∑—ã–≤–∞–µ–º fx_id –∫–∞–∫ ID
                "name": operator_name,       # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
                "email": f"{key.lower()}@example.com",
                "operator_id": operator_id,
                "client_id": client_id,
                "phone": "",
                "status": "–ö–ª–∏–µ–Ω—Ç",
                "avatar": "üë§",
            })
        if not users:
            users = [{"id": "INST-LOCAL-DEV", "name": "Local Client", "email": "", "phone": "", "status": "–ö–ª–∏–µ–Ω—Ç",
                      "avatar": "üë§"}]
        return users

    def filter_users(self, text):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        for card in self.user_cards:
            user_data = card.user_data
            should_show = (
                    text.lower() in user_data["name"].lower() or
                    text.lower() in user_data["id"].lower()
            )
            card.setVisible(should_show)

    def on_user_selected(self, user_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['name']} (ID: {user_data['id']})")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from windows.main_window import MainWindow

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.main_window = MainWindow(user_data)
        self.main_window.show()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
        self.close()

    def update_theme_info(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ"""
        theme_data = theme_manager.get_theme_styles()
        theme_name = theme_data["name"]
        shortcut_hint = "Ctrl+T –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"
        self.theme_info_label.setText(f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {theme_name} ‚Ä¢ {shortcut_hint}")

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É"""
        theme_data = theme_manager.get_theme_styles()
        colors = theme_data["colors"]
        styles = theme_data["styles"]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
        self.update_theme_info()

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ–∫–Ω–∞
        self.setStyleSheet(f"""
            QMainWindow {{
                background-color: {colors["background"]};
                color: {colors["text_primary"]};
            }}
            QMenuBar {{
                background-color: {colors["surface"]};
                color: {colors["text_primary"]};
                border-bottom: 1px solid {colors["border"]};
                padding: 2px;
            }}
            QMenuBar::item {{
                background-color: transparent;
                padding: 4px 8px;
                border-radius: 4px;
            }}
            QMenuBar::item:selected {{
                background-color: {colors["primary"]};
                color: white;
            }}
            QMenu {{
                background-color: {colors["surface"]};
                color: {colors["text_primary"]};
                border: 1px solid {colors["border"]};
                border-radius: 4px;
            }}
            QMenu::item {{
                padding: 6px 12px;
            }}
            QMenu::item:selected {{
                background-color: {colors["primary"]};
                color: white;
            }}
            QMenu::item:checked {{
                background-color: {colors["surface_alt"]};
                color: {colors["primary"]};
                font-weight: bold;
            }}
            QMenu::separator {{
                height: 1px;
                background-color: {colors["border"]};
                margin: 4px 0;
            }}
        """)

        # –°—Ç–∏–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI
        if hasattr(self, 'title_label'):
            self.title_label.setStyleSheet(f"color: {colors['text_primary']};")

        if hasattr(self, 'theme_info_label'):
            self.theme_info_label.setStyleSheet(f"color: {colors['text_muted']};")

        if hasattr(self, 'search_label'):
            self.search_label.setStyleSheet(f"color: {colors['text_secondary']};")

        if hasattr(self, 'search_input'):
            self.search_input.setStyleSheet(styles["input"])

        if hasattr(self, 'scroll_area'):
            self.scroll_area.setStyleSheet(f"""
                {styles["scroll_area"]}
                QScrollArea {{
                    border: 1px solid {colors["border"]};
                    border-radius: 8px;
                    background-color: {colors["surface"]};
                }}
            """)

        if hasattr(self, 'theme_toggle_btn'):
            self.theme_toggle_btn.setStyleSheet(f"""
                {styles["button"]}
                QPushButton {{
                    background-color: {colors["surface_alt"]};
                    color: {colors["text_primary"]};
                    border: 1px solid {colors["border"]};
                }}
                QPushButton:hover {{
                    background-color: {colors["primary"]};
                    color: white;
                }}
            """)
