from PySide6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout,
                               QListWidget, QListWidgetItem, QPushButton,
                               QMenu, QMessageBox)
from PySide6.QtCore import Qt
from styles.theme_manager import theme_manager, ThemeType


class HistoryDialog(QDialog):
    """
    –ü—Ä–æ—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤: —Å–ø–∏—Å–æ–∫ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å—Ç–∞—Ç—É—Å–æ–≤, –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É,
    —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ/–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º—É –º–µ–Ω—é.
    """

    def __init__(self, chats, on_open, on_delete, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤")
        self.resize(520, 420)
        self.on_open = on_open
        self.on_delete = on_delete
        self.chats = list(chats)  # –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è

        self.setup_ui()
        self._reload()
        theme_manager.theme_changed.connect(self.apply_theme)
        self.apply_theme()

    def setup_ui(self):
        layout = QVBoxLayout(self)

        # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        self.list_widget = QListWidget()
        self.list_widget.setSelectionMode(QListWidget.SingleSelection)
        self.list_widget.itemDoubleClicked.connect(self._open_selected)

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.list_widget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.list_widget.customContextMenuRequested.connect(self._show_context_menu)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QHBoxLayout()
        self.open_btn = QPushButton("–û—Ç–∫—Ä—ã—Ç—å")
        self.del_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        self.close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")

        self.open_btn.clicked.connect(self._open_selected)
        self.del_btn.clicked.connect(self._delete_selected)
        self.close_btn.clicked.connect(self.accept)

        buttons.addStretch()
        buttons.addWidget(self.open_btn)
        buttons.addWidget(self.del_btn)
        buttons.addWidget(self.close_btn)

        layout.addWidget(self.list_widget)
        layout.addLayout(buttons)

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã –∫ –¥–∏–∞–ª–æ–≥—É"""
        theme_data = theme_manager.get_theme_styles()
        colors = theme_data["colors"]
        styles = theme_data["styles"]

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–∏–∞–ª–æ–≥–∞
        self.setStyleSheet(f"""
            QDialog {{
                background-color: {colors["background"]};
                color: {colors["text_primary"]};
            }}
            QListWidget {{
                background-color: {colors["surface"]};
                border: 1px solid {colors["border"]};
                border-radius: 6px;
                color: {colors["text_primary"]};
                font-size: 11px;
            }}
            QListWidget::item {{
                padding: 8px;
                margin: 2px;
                border-radius: 4px;
            }}
            QListWidget::item:selected {{
                background-color: {colors["primary"]};
                color: white;
            }}
            QListWidget::item:hover {{
                background-color: {colors["surface_alt"]};
            }}
        """)

        # –°—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫
        button_style = styles["button"]
        for btn in [self.open_btn, self.del_btn, self.close_btn]:
            btn.setStyleSheet(button_style)

    def _status_emoji(self, status):
        mapping = {
            "–ù–æ–≤–∞—è": "üÜï",
            "–í —Ä–∞–±–æ—Ç–µ": "üü¢",
            "–û–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞": "üü°",
            "–û–∂–∏–¥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞": "üü†",
            "–ó–∞–∫—Ä—ã—Ç–∞": "‚ö™"
        }
        return mapping.get(status, "üí¨")

    def _status_color(self, status, colors):
        if status == "–ù–æ–≤–∞—è":
            return colors["primary"]
        if status == "–í —Ä–∞–±–æ—Ç–µ":
            return colors["success"]
        if status == "–û–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞":
            return colors["warning"]
        if status == "–û–∂–∏–¥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞":
            return colors["warning"]
        if status == "–ó–∞–∫—Ä—ã—Ç–∞":
            return colors["text_muted"]
        return colors["text_secondary"]

    def _reload(self):
        self.list_widget.clear()
        colors = theme_manager.get_theme_styles()["colors"]

        # –Ω–æ–≤–µ–µ ‚Äî –≤—ã—à–µ
        def sort_key(ch):
            return ch.get("updated_at", ""), ch.get("id", "")

        for chat in sorted(self.chats, key=sort_key, reverse=True):
            item = QListWidgetItem()
            emoji = self._status_emoji(chat['status'])
            status = chat['status']
            chat_id = chat['id']
            title = chat['title']
            updated = chat.get('updated_at', '')

            text = f"{emoji} [{status}] {chat_id} ‚Äî {title} ‚Ä¢ {updated}"
            item.setText(text)

            # –¶–≤–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É
            item.setForeground(Qt.black if theme_manager.get_current_theme() == ThemeType.LIGHT else Qt.white)
            item.setData(Qt.UserRole, chat["id"])
            self.list_widget.addItem(item)

    def _selected_chat_id(self):
        it = self.list_widget.currentItem()
        if not it:
            return None
        return it.data(Qt.UserRole)

    def _open_selected(self):
        chat_id = self._selected_chat_id()
        if not chat_id:
            return
        if self.on_open:
            self.on_open(chat_id)
        self.accept()

    def _delete_selected(self):
        chat_id = self._selected_chat_id()
        if not chat_id:
            return

        reply = QMessageBox.question(
            self,
            "–£–¥–∞–ª–∏—Ç—å —á–∞—Ç",
            "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∏ —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫
            self.chats = [c for c in self.chats if c["id"] != chat_id]
            if self.on_delete:
                self.on_delete(chat_id)
            self._reload()

    def _show_context_menu(self, pos):
        item = self.list_widget.itemAt(pos)
        if not item:
            return

        menu = QMenu(self)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –º–µ–Ω—é
        colors = theme_manager.get_theme_styles()["colors"]
        menu.setStyleSheet(f"""
            QMenu {{
                background-color: {colors["surface"]};
                color: {colors["text_primary"]};
                border: 1px solid {colors["border"]};
                border-radius: 4px;
            }}
            QMenu::item {{
                padding: 6px 12px;
            }}
            QMenu::item:selected {{
                background-color: {colors["primary"]};
                color: white;
            }}
        """)

        open_action = menu.addAction("–û—Ç–∫—Ä—ã—Ç—å")
        del_action = menu.addAction("–£–¥–∞–ª–∏—Ç—å")

        act = menu.exec_(self.list_widget.mapToGlobal(pos))
        if act == open_action:
            self._open_selected()
        elif act == del_action:
            self._delete_selected()
